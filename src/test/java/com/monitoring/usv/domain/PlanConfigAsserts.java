package com.monitoring.usv.domain;

import static com.monitoring.usv.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PlanConfigAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanConfigAllPropertiesEquals(PlanConfig expected, PlanConfig actual) {
        assertPlanConfigAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanConfigAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanConfigAllUpdatablePropertiesEquals(PlanConfig expected, PlanConfig actual) {
        assertPlanConfigUpdatableFieldsEquals(expected, actual);
        assertPlanConfigUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanConfigAutoGeneratedPropertiesEquals(PlanConfig expected, PlanConfig actual) {
        assertThat(expected)
            .as("Verify PlanConfig auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanConfigUpdatableFieldsEquals(PlanConfig expected, PlanConfig actual) {
        assertThat(expected)
            .as("Verify PlanConfig relevant properties")
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getAttempts()).as("check attempts").isEqualTo(actual.getAttempts()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanConfigUpdatableRelationshipsEquals(PlanConfig expected, PlanConfig actual) {
        // empty method
    }
}
