package com.monitoring.usv.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BankCardAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankCardAllPropertiesEquals(BankCard expected, BankCard actual) {
        assertBankCardAutoGeneratedPropertiesEquals(expected, actual);
        assertBankCardAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankCardAllUpdatablePropertiesEquals(BankCard expected, BankCard actual) {
        assertBankCardUpdatableFieldsEquals(expected, actual);
        assertBankCardUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankCardAutoGeneratedPropertiesEquals(BankCard expected, BankCard actual) {
        assertThat(expected)
            .as("Verify BankCard auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankCardUpdatableFieldsEquals(BankCard expected, BankCard actual) {
        assertThat(expected)
            .as("Verify BankCard relevant properties")
            .satisfies(e -> assertThat(e.getCardCode()).as("check cardCode").isEqualTo(actual.getCardCode()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getCvv()).as("check cvv").isEqualTo(actual.getCvv()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankCardUpdatableRelationshipsEquals(BankCard expected, BankCard actual) {
        // empty method
    }
}
