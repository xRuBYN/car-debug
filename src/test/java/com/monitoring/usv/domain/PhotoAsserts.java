package com.monitoring.usv.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PhotoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoAllPropertiesEquals(Photo expected, Photo actual) {
        assertPhotoAutoGeneratedPropertiesEquals(expected, actual);
        assertPhotoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoAllUpdatablePropertiesEquals(Photo expected, Photo actual) {
        assertPhotoUpdatableFieldsEquals(expected, actual);
        assertPhotoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoAutoGeneratedPropertiesEquals(Photo expected, Photo actual) {
        assertThat(expected)
            .as("Verify Photo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoUpdatableFieldsEquals(Photo expected, Photo actual) {
        assertThat(expected)
            .as("Verify Photo relevant properties")
            .satisfies(e -> assertThat(e.getPath()).as("check path").isEqualTo(actual.getPath()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoUpdatableRelationshipsEquals(Photo expected, Photo actual) {
        assertThat(expected)
            .as("Verify Photo relationships")
            .satisfies(e -> assertThat(e.getVehicle()).as("check vehicle").isEqualTo(actual.getVehicle()))
            .satisfies(e -> assertThat(e.getInspection()).as("check inspection").isEqualTo(actual.getInspection()))
            .satisfies(e -> assertThat(e.getAccident()).as("check accident").isEqualTo(actual.getAccident()))
            .satisfies(e -> assertThat(e.getService()).as("check service").isEqualTo(actual.getService()));
    }
}
